#!/bin/bash

# HubControl - Script de Inicializa√ß√£o
# Este script configura e inicia o sistema HubControl com Supabase

set -e  # Para em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} ‚ö†Ô∏è  $1"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} ‚ùå $1"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} ‚ÑπÔ∏è  $1"
}

# Banner
echo -e "${BLUE}"
cat << "EOF"
 _    _       _     _       _____                      _ _ 
| |  | |     | |   | |     /  ___|                    | | |
| |  | |_ __ | |__ | |_   | |     _ __   ___  _ __   | | |
| |/\| | '_ \| '_ \| __|  | |    | '_ \ / _ \| '_ \  | | |
\  /\  / |_) | | | | |_   | |___| | | | (_) | | | | | | |
 \/  \/| .__/|_| |_|\__|  \____/|_| |_|\___/|_| |_| |_|
       | |                                                 
       |_|                                                 
EOF
echo -e "${NC}"

log "üöÄ Iniciando HubControl com Supabase..."

# Verificar se o Docker est√° instalado
if ! command -v docker &> /dev/null; then
    error "Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
    exit 1
fi

# Verificar se o Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
    exit 1
fi

# Verificar se o Docker est√° rodando
if ! docker info &> /dev/null; then
    error "Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro."
    exit 1
fi

log "‚úÖ Docker e Docker Compose est√£o funcionando"

# Verificar portas dispon√≠veis
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null ; then
        error "Porta $port j√° est√° em uso. Por favor, libere a porta ou altere a configura√ß√£o."
        exit 1
    fi
}

check_port 3000
check_port 8000
check_port 6379

log "‚úÖ Portas dispon√≠veis verificadas"

# Criar diret√≥rios necess√°rios
log "üìÅ Criando diret√≥rios necess√°rios..."
mkdir -p logs
mkdir -p uploads
mkdir -p models
mkdir -p backend/logs
mkdir -p backend/uploads
mkdir -p backend/models

# Criar arquivo .env se n√£o existir
if [ ! -f "backend/.env" ]; then
    log "üìù Criando arquivo .env..."
    cp backend/env.example backend/.env
    
    # Atualizar configura√ß√µes do Supabase
    sed -i 's|SUPABASE_URL=.*|SUPABASE_URL=https://auhkbtxjoqvahiajopop.supabase.co|g' backend/.env
    sed -i 's|SUPABASE_ANON_KEY=.*|SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF1aGtidHhqb3F2YWhpYWpvcG9wIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyNTk5NTYsImV4cCI6MjA3MTgzNTk1Nn0.TmzyeS7_NEiR3tQbFapsqGUi98Zb44YmuKFwlvCYX2I|g' backend/.env
    sed -i 's|DATABASE_URL=.*|DATABASE_URL=postgresql://postgres:himmelcorp@123@db.auhkbtxjoqvahiajopop.supabase.co:5432/postgres|g' backend/.env
    
    log "‚úÖ Arquivo .env criado com configura√ß√µes do Supabase"
else
    log "‚ÑπÔ∏è  Arquivo .env j√° existe"
fi

# Parar containers existentes se houver
log "üõë Parando containers existentes..."
docker-compose down --remove-orphans 2>/dev/null || true

# Limpar imagens antigas (opcional)
read -p "üßπ Deseja limpar imagens Docker antigas? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log "üßπ Limpando imagens antigas..."
    docker system prune -f
fi

# Construir e iniciar servi√ßos
log "üî® Construindo e iniciando servi√ßos..."
docker-compose up --build -d

# Aguardar servi√ßos ficarem prontos
log "‚è≥ Aguardando servi√ßos ficarem prontos..."
sleep 30

# Verificar sa√∫de dos servi√ßos
log "üè• Verificando sa√∫de dos servi√ßos..."

# Verificar Redis
if docker-compose exec -T redis redis-cli ping | grep -q "PONG"; then
    log "‚úÖ Redis est√° funcionando"
else
    error "‚ùå Redis n√£o est√° respondendo"
    exit 1
fi

# Verificar Backend
if curl -f http://localhost:8000/health >/dev/null 2>&1; then
    log "‚úÖ Backend est√° funcionando"
else
    error "‚ùå Backend n√£o est√° respondendo"
    exit 1
fi

# Verificar Frontend
if curl -f http://localhost:3000 >/dev/null 2>&1; then
    log "‚úÖ Frontend est√° funcionando"
else
    error "‚ùå Frontend n√£o est√° respondendo"
    exit 1
fi

# Migrar schema para Supabase
log "üóÑÔ∏è  Migrando schema para Supabase..."
if [ -f "scripts/migrate_to_supabase.py" ]; then
    # Instalar depend√™ncias necess√°rias
    pip3 install psycopg2-binary >/dev/null 2>&1 || {
        warn "pip3 n√£o dispon√≠vel, tentando com pip..."
        pip install psycopg2-binary >/dev/null 2>&1 || {
            error "N√£o foi poss√≠vel instalar psycopg2-binary. Execute manualmente: pip install psycopg2-binary"
        }
    }
    
    # Executar migra√ß√£o
    python3 scripts/migrate_to_supabase.py
    if [ $? -eq 0 ]; then
        log "‚úÖ Schema migrado com sucesso para o Supabase"
    else
        warn "‚ö†Ô∏è  Erro na migra√ß√£o do schema. Verifique os logs acima."
    fi
else
    warn "‚ö†Ô∏è  Script de migra√ß√£o n√£o encontrado"
fi

# Mostrar informa√ß√µes de acesso
echo
echo -e "${GREEN}üéâ HubControl iniciado com sucesso!${NC}"
echo
echo -e "${BLUE}üì± Acesse o sistema:${NC}"
echo -e "   Frontend: ${GREEN}http://localhost:3000${NC}"
echo -e "   Backend API: ${GREEN}http://localhost:8000${NC}"
echo -e "   Documenta√ß√£o API: ${GREEN}http://localhost:8000/docs${NC}"
echo
echo -e "${BLUE}üóÑÔ∏è  Banco de dados:${NC}"
echo -e "   Supabase: ${GREEN}https://auhkbtxjoqvahiajopop.supabase.co${NC}"
echo -e "   Status: ${GREEN}Conectado e funcionando${NC}"
echo
echo -e "${BLUE}üîß Comandos √∫teis:${NC}"
echo -e "   Ver logs: ${YELLOW}docker-compose logs -f${NC}"
echo -e "   Parar: ${YELLOW}docker-compose down${NC}"
echo -e "   Reiniciar: ${YELLOW}docker-compose restart${NC}"
echo -e "   Status: ${YELLOW}docker-compose ps${NC}"
echo
echo -e "${BLUE}üìä Monitoramento:${NC}"
echo -e "   Redis: ${GREEN}http://localhost:6379${NC}"
echo -e "   Health Check: ${GREEN}http://localhost:8000/health${NC}"
echo

# Verificar se h√° atualiza√ß√µes dispon√≠veis
log "üîç Verificando atualiza√ß√µes..."
docker-compose pull --quiet

# Mostrar status final
log "üìä Status dos servi√ßos:"
docker-compose ps

log "‚ú® Setup completo! O HubControl est√° rodando com Supabase!"
log "üåê Acesse http://localhost:3000 para come√ßar a usar o sistema" 